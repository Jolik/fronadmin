    EditParentForm.TaskSourcesList := TaskSourceList;

  FreeAndNil(FCurrentTaskSourcesList);
  FCurrentTaskSourcesList := TaskSourceList;

  try
    EditForm.ShowModal(UpdateCallback);
  except
    on E: Exception do
    begin
      Log('TTaskParentForm.btnUpdateClick show modal error: ' + E.Message, lrtError);

      if Assigned(EditParentForm) then
        EditParentForm.TaskSourcesList := nil;

      FreeAndNil(FCurrentTaskSourcesList);
      raise;
    end;
  end;
end;

procedure TTaskParentForm.UpdateCallback(ASender: TComponent; AResult: Integer);
var
  UpdateResult: Boolean;
  ParentTask: TTask;
  ParentForm: TTaskEditParentForm;
begin
  try
    if AResult = mrOk then
    begin
      if Assigned(RestBroker) then
      begin
        UpdateResult := False;
        var Req := RestBroker.CreateReqUpdate();
        if not Assigned(Req) then
          Req := TReqUpdate.Create;
        try
          Req.Id := EditForm.Entity.Id;
          if Assigned(Req.ReqBody) and (EditForm.Entity is TFieldSet) then
            TFieldSet(Req.ReqBody).Assign(TFieldSet(EditForm.Entity));
          var JR := RestBroker.Update(Req);
          try
            UpdateResult := True;
          finally
            JR.Free;
          end;
        except
          on E: Exception do
            UpdateResult := False;
        end;
      end
      else
      begin
        UpdateResult := Broker.Update(EditForm.Entity);
      end;
      if not UpdateResult then
        Exit;

      ParentTask := nil;
      if EditForm.Entity is TTask then
        ParentTask := TTask(EditForm.Entity);

      if Assigned(FSourceTaskBroker) and Assigned(FCurrentTaskSourcesList) and Assigned(ParentTask) then
      begin
        if not ParentTask.Tid.IsEmpty then
        begin
          for var I := 0 to FCurrentTaskSourcesList.Count - 1 do
          begin
            var Source := FCurrentTaskSourcesList.Items[I] as TTaskSource;
            if not Assigned(Source) then
              Continue;

            try
              var UB := FSourceTaskBroker;
              var ReqUpd := UB.CreateReqUpdate();
              try
                ReqUpd.BasePath := UB.BasePath;
                // pass task id as query parameter instead of path segment
                ReqUpd.AddPath := '';
                ReqUpd.Params.AddOrSetValue('tid', ParentTask.Tid);
                ReqUpd.Id := Source.Sid;          // /sources/<sid>/update
                if Assigned(ReqUpd.ReqBody) then
                  TFieldSet(ReqUpd.ReqBody).Assign(Source);
                var JR := UB.Update(ReqUpd);
                JR.Free;
              finally
                ReqUpd.Free;
              end;
            except
              on E: Exception do
                Log('TTaskParentForm.UpdateCallback update source error: ' + E.Message, lrtError);
            end;
          end;
        end;
      end;

      Refresh();

      if FId = '' then
        FDMemTableEntity.First
      else
        FDMemTableEntity.Locate('Id', FId, []);
    end;
  finally
    if EditForm is TTaskEditParentForm then
    begin
      ParentForm := TTaskEditParentForm(EditForm);
      ParentForm.TaskSourcesList := nil;
    end;

    FreeAndNil(FCurrentTaskSourcesList);
  end;
end;

procedure TTaskParentForm.OnInfoUpdated(AEntity: TEntity);
begin
  inherited;
  lTaskInfoModuleValue.Caption    := (AEntity as TTask).Module;
end;


end.

