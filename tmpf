unit TasksParentFormUnit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,
  Controls, Forms, uniGUITypes, uniGUIAbstractClasses,
  uniGUIClasses, uniGUIForm, ListParentFormUnit, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, uniPanel, uniLabel, uniPageControl, uniSplitter,
  uniBasicGrid, uniDBGrid, uniToolBar, uniGUIBaseClasses,
  EntityBrokerUnit, EntityUnit,
  TaskEditParentFormUnit, TaskSourceUnit, ParentEditFormUnit,
  TasksRestBrokerUnit, TaskHttpRequests, BaseRequests, RestBrokerBaseUnit,
  TaskSourceHttpRequests, TaskSourcesRestBrokerUnit;

type
  TTaskParentForm = class(TListParentForm)
    cpTaskInfoModule: TUniContainerPanel;
    lTaskInfoModule: TUniLabel;
    lTaskInfoModuleValue: TUniLabel;
    pSeparator5: TUniPanel;
    procedure btnUpdateClick(Sender: TObject);
    procedure UniFormCreate(Sender: TObject);
    procedure UniFormDestroy(Sender: TObject);
  protected
    FSourceTaskBroker: TTaskSourcesRestBroker;
    FCurrentTaskSourcesList: TTaskSourceList;

    procedure OnInfoUpdated(AEntity: TEntity);override;
    ///
    function CreateBroker(): TEntityBroker; override;
    function CreateRestBroker(): TRestBrokerBase; override;
    function CreateTaskSourcesBroker(): TRestBrokerBase; virtual;
    ///
    function CreateEditForm(): TParentEditForm; override;

    procedure UpdateCallback(ASender: TComponent; AResult: Integer);

  public

  end;

function TasksForm: TTaskParentForm;

implementation

{$R *.dfm}

uses
  MainModule, uniGUIApplication, LoggingUnit, TasksBrokerUnit, TaskUnit;

function TasksForm: TTaskParentForm;
begin
  Result := TTaskParentForm(UniMainModule.GetFormInstance(TTaskParentForm));
end;

{ TTaskParentForm }


function TTaskParentForm.CreateBroker: TEntityBroker;
begin
  ///   ""
  Result := TTasksBroker.Create(UniMainModule.CompID,UniMainModule.DeptID);
end;

function TTaskParentForm.CreateRestBroker: TRestBrokerBase;
begin
  Result := TTasksRestBroker.Create(UniMainModule.XTicket);
end;


function TTaskParentForm.CreateEditForm: TParentEditForm;
begin
   Result := ParentTaskEditForm() as TParentEditForm;
end;

function TTaskParentForm.CreateTaskSourcesBroker: TRestBrokerBase;
begin
    FSourceTaskBroker := TTaskSourcesRestBroker.Create(UniMainModule.XTicket);
end;

procedure TTaskParentForm.UniFormCreate(Sender: TObject);
begin
  inherited;
  FSourceTaskBroker:= CreateTaskSourcesBroker() as TTaskSourcesRestBroker;
  FCurrentTaskSourcesList := nil;
end;

procedure TTaskParentForm.UniFormDestroy(Sender: TObject);
begin
  FreeAndNil(FCurrentTaskSourcesList);
  FreeAndNil(FSourceTaskBroker);

  inherited;
end;

procedure TTaskParentForm.btnUpdateClick(Sender: TObject);
var
  ParentTaskEntity: TEntity;
  ParentTask: TTask;
  TaskSourcePageCount: Integer;
  EntityList: TEntityList;
  TaskSourceList: TTaskSourceList;
  EditParentForm: TTaskEditParentForm;
begin
  PrepareEditForm(true);

  FId := FDMemTableEntity.FieldByName('Id').AsString;

  ParentTaskEntity := Broker.Info(FId);
  EditForm.Entity := ParentTaskEntity;

  TaskSourceList := nil;

  // no-op for REST broker; path is provided per-request

  if Assigned(ParentTaskEntity) and (ParentTaskEntity is TTask) and Assigned(FSourceTaskBroker) then
  begin
    ParentTask := ParentTaskEntity as TTask;

    if ParentTask.Tid <> '' then
    begin
      // Build request via REST broker with BasePath '/api/v2/tasks/<tid>' and endpoint 'sources/list'
      var Req := (FSourceTaskBroker as TTaskSourcesRestBroker).CreateReqList();
      Req.BasePath := (FSourceTaskBroker as TTaskSourcesRestBroker).BasePath;
      Req.AddPath := ParentTask.Tid; // results in /tasks/<tid>/...
      var RespList := (FSourceTaskBroker as TTaskSourcesRestBroker).List(Req as TReqList) as TTaskSourceListResponse;
      EntityList := nil;
      try
        if Assigned(RespList) then
          EntityList := RespList.EntityList;
      except
        on E: Exception do
        begin
          Log('TTaskParentForm.btnUpdateClick list error: ' + E.Message, lrtError);
          EntityList := nil;
        end;
      end;
      RespList.Free;
      if Assigned(EntityList) then
      begin
        if EntityList is TTaskSourceList then
        begin
          TaskSourceList := TTaskSourceList(EntityList);
          EntityList := nil;
        end
        else
        begin
          EntityList.Free;
          TaskSourceList := nil;
          EntityList := nil;
        end;
      end;
    end;
  end;

  EditParentForm := EditForm as TTaskEditParentForm;
  if Assigned(EditParentForm) then
