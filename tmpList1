unit ListParentFormUnit;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics,
  Controls, Forms,
  System.Generics.Collections,
  uniGUITypes, uniGUIAbstractClasses,
  uniGUIClasses, uniGUIForm, FireDAC.Stan.Intf,
  FireDAC.Stan.Option, FireDAC.Stan.Param, FireDAC.Stan.Error, FireDAC.DatS,
  FireDAC.Phys.Intf, FireDAC.DApt.Intf, Data.DB, FireDAC.Comp.DataSet,
  FireDAC.Comp.Client, uniPanel, uniPageControl, uniSplitter, uniBasicGrid,
  uniDBGrid, uniToolBar, uniGUIBaseClasses,
  EntityUnit, EntityBrokerUnit,
  ParentFormUnit, ParentEditFormUnit, uniLabel, StrUtils,
  RestBrokerBaseUnit, BaseRequests, BaseResponses, HttpClientUnit;

type
  ///  базовая форма с таблицей-списком
  TListParentForm = class(TParentForm)
    tbEntity: TUniToolBar;
    btnNew: TUniToolButton;
    btnUpdate: TUniToolButton;
    btnRemove: TUniToolButton;
    btnRefresh: TUniToolButton;
    dbgEntity: TUniDBGrid;
    splSplitter: TUniSplitter;
    pcEntityInfo: TUniPageControl;
    DatasourceEntity: TDataSource;
    FDMemTableEntity: TFDMemTable;
    FDMemTableEntityName: TStringField;
    FDMemTableEntityCaption: TStringField;
    FDMemTableEntityCreated: TDateTimeField;
    FDMemTableEntityUpdated: TDateTimeField;
    FDMemTableEntityId: TStringField;
    tsTaskInfo: TUniTabSheet;
    cpTaskInfo: TUniContainerPanel;
    cpTaskInfoID: TUniContainerPanel;
    lTaskInfoID: TUniLabel;
    lTaskInfoIDValue: TUniLabel;
    cpTaskInfoName: TUniContainerPanel;
    lTaskInfoName: TUniLabel;
    lTaskInfoNameValue: TUniLabel;
    lTaskCaption: TUniLabel;
    pSeparator1: TUniPanel;
    pSeparator2: TUniPanel;
    cpTaskInfoCreated: TUniContainerPanel;
    lTaskInfoCreated: TUniLabel;
    lTaskInfoCreatedValue: TUniLabel;
    pSeparator3: TUniPanel;
    cpTaskInfoUpdated: TUniContainerPanel;
    lTaskInfoUpdated: TUniLabel;
    lTaskInfoUpdatedValue: TUniLabel;
    pSeparator4: TUniPanel;
    procedure btnNewClick(Sender: TObject);
    procedure btnUpdateClick(Sender: TObject);
    procedure btnRefreshClick(Sender: TObject);
    procedure UniFormCreate(Sender: TObject);
    procedure btnRemoveClick(Sender: TObject);
    procedure dbgEntitySelectionChange(Sender: TObject);
  protected
    FID: string;
    procedure Refresh(const AId: String = ''); override;
    procedure UpdateCallback(ASender: TComponent; AResult: Integer);
    procedure OnInfoUpdated(AEntity: TEntity);virtual;
  end;

function ListParentForm: TListParentForm;

implementation

{$R *.dfm}

uses
  MainModule, uniGUIApplication;

{  TListParentForm  }

procedure TListParentForm.btnUpdateClick(Sender: TObject);
var
  LEntity: TEntity;
  //LId : string;

begin
  PrepareEditForm(true);

  ///  получаем информацию о выбранном элементе в гриде
  ///  !!!  LId :=
  ///  пока берем первый элемент
  FId := FDMemTableEntity.FieldByName('Id').AsString;
  ///  получаем полную информацию о сущности от брокера
  LEntity := Broker.Info(FId);
  ///  устанавлаием сущность в окно редактирования
  EditForm.Entity := LEntity;

  try
    EditForm.ShowModal(UpdateCallback);
  finally
///  удалять нельзя потому что класс переходит под управление форму редактирования
///    LEntity.Free;
  end;
end;

procedure TListParentForm.dbgEntitySelectionChange(Sender: TObject);
var
  LEntity : TEntity;
  LId     : string;
begin
  LId := FDMemTableEntity.FieldByName('Id').AsString;
  if Assigned(RestBroker) then
  begin
    var Req := RestBroker.CreateReqInfo();
    Req.Id := LId;
    var Resp := RestBroker.Info(Req);
    try
      LEntity := Resp.Entity as TEntity;
      if not Assigned(LEntity) then Exit;
      OnInfoUpdated(LEntity);
    finally
      LEntity.Free
    end;
  end;
end;

procedure TListParentForm.OnInfoUpdated(AEntity: TEntity);
var
   DT      : string;
begin
  lTaskInfoIDValue.Caption      := AEntity.ID;
  lTaskInfoNameValue.Caption    := AEntity.Name;
  DateTimeToString(DT, 'dd.mm.yyyy HH:nn', AEntity.Created);
  lTaskInfoCreatedValue.Caption := DT;
  DateTimeToString(DT, 'dd.mm.yyyy HH:nn', AEntity.Updated);
  lTaskInfoUpdatedValue.Caption := DT;
  tsTaskInfo.TabVisible := True;
end;

procedure TListParentForm.btnNewClick(Sender: TObject);
var
  LEntity: TEntity;

begin
  PrepareEditForm;

  ///  создаем класс сущности от брокера
  LEntity := Broker.CreateNew();
  ///  устанавлаием сущность в окно редактирования
  EditForm.Entity := LEntity;

  try
    EditForm.ShowModal(NewCallback);
  finally
///  удалять нельзя потому что класс переходит под управление форму редактирования
///    LEntity.Free;
  end;
end;

procedure TListParentForm.btnRefreshClick(Sender: TObject);
var
  LId : string;

begin
  ///  получаем информацию о выбранном элементе в гриде
  ///  !!!  LId :=
///  Refresh(LId);
   LId := IfThen(FDMemTableEntity.IsEmpty, '', FDMemTableEntity.FieldByName('Id').AsString);

   Refresh(LId);
end;

procedure TListParentForm.btnRemoveClick(Sender: TObject);
var
  LId : string;

begin
  ///  получаем информацию о выбранном элементе в гриде
  ///  !!!  LId :=
  ///  пока берем первый элемент
  LId := FDMemTableEntity.FieldByName('Id').AsString;
  ///  получаем полную информацию о сущности от брокера
  MessageDlg('Удалить задачу?', mtConfirmation, [mbYes, mbNo],
    procedure(Sender: TComponent; Res: Integer)
    begin
      if Res = mrYes then
      begin
        var R := RestBroker.CreateReqRemove();
        if not Assigned(R) then
          R := TReqRemove.Create;
        R.Id := LId;
        var JR := RestBroker.Remove(R);
        JR.Free;
        Refresh();
      end;
    end
  );
end;

procedure TListParentForm.Refresh(const AId: String = '');
var
