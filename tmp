unit TaskHttpRequests;

interface

uses
  System.SysUtils,
  System.JSON,
  EntityUnit,
  HttpClientUnit,
  StringListUnit,
  BaseRequests,
  BaseResponses,
  TaskUnit;

type
  // Тело запроса списка задач
  TTaskReqListBody = class(TReqListBody)
  end;

  // Ответ: список задач
  TTaskListResponse = class(TListResponse)
  private
    function GetTaskList: TTaskList;
  public
    constructor Create;
    property TaskList: TTaskList read GetTaskList;
  end;

  // Ответ: одна задача
  TTaskInfoResponse = class(TEntityResponse)
  private
    function GetTask: TTask;
  public
    constructor Create;
    property Task: TTask read GetTask;
  end;

  // Create: response for new task
  TTaskNewResult = class(TFieldSet)
  private
    FTid: string;
  public
    procedure Parse(src: TJSONObject; const APropertyNames: TArray<string> = nil); override;
    procedure Serialize(dst: TJSONObject; const APropertyNames: TArray<string> = nil); override;
    property Tid: string read FTid write FTid;
  end;

  TTaskNewResponse = class(TFieldSetResponse)
  private
    function GetTaskNewRes: TTaskNewResult;
  public
    constructor Create; virtual;
    property TaskNewRes: TTaskNewResult read GetTaskNewRes;
  end;

  // Запросы
  TTaskReqList = class(TReqList)
  protected
    class function BodyClassType: TFieldSetClass; override;
  public
    constructor Create; override;
    function Body: TTaskReqListBody;
  end;

  TTaskReqInfo = class(TReqInfo)
  public
    constructor Create; override;
    constructor CreateID(const ATaskId: string);
  end;

  TTaskReqNew = class(TReqNew)
  protected
    class function BodyClassType: TFieldSetClass; override;
  public
    constructor Create; override;
  end;

  TTaskReqUpdate = class(TReqUpdate)
  protected
    class function BodyClassType: TFieldSetClass; override;
  public
    constructor Create; override;
    procedure SetTaskId(const Value: string);
  end;

  TTaskReqRemove = class(TReqRemove)
  public
    constructor Create; override;
    procedure SetTaskId(const Value: string);
  end;

implementation

uses
  APIConst, FuncUnit;

{ TTaskListResponse }

constructor TTaskListResponse.Create;
begin
  inherited Create(TTaskList, 'response', 'tasks');
end;

function TTaskListResponse.GetTaskList: TTaskList;
begin
  Result := EntityList as TTaskList;
end;

{ TTaskInfoResponse }

constructor TTaskInfoResponse.Create;
begin
  inherited Create(TTask, 'response', 'task');
end;

function TTaskInfoResponse.GetTask: TTask;
begin
  Result := Entity as TTask;
end;

{ TTaskNewResponse / TTaskNewResult }

constructor TTaskNewResponse.Create;
begin
  inherited Create(TTaskNewResult, 'response', '');
end;

function TTaskNewResponse.GetTaskNewRes: TTaskNewResult;
begin
  if FieldSet is TTaskNewResult then
    Result := TTaskNewResult(FieldSet)
  else
    Result := nil;
end;

procedure TTaskNewResult.Parse(src: TJSONObject; const APropertyNames: TArray<string>);
var
  V: TJSONValue;
begin
  inherited Parse(src, APropertyNames);
